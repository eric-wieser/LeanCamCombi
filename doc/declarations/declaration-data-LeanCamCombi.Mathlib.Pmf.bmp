{"name":"LeanCamCombi.Mathlib.Pmf","instances":[],"imports":["Init","LeanCamCombi.Mathlib.MeasureTheory.Measure.MeasureSpace","Mathlib.Probability.ProbabilityMassFunction.Constructions"],"declarations":[{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Pmf.lean#L63-L73","name":"Pmf.map_not_bernoulli'","line":63,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Pmf.html#Pmf.map_not_bernoulli'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Pmf.html#Pmf.map_not_bernoulli'\"><span class=\"name\">Pmf</span>.<span class=\"name\">map_not_bernoulli'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#Pmf.map\">Pmf.map</a> <a href=\"./Init/Prelude.html#Not\">Not</a> (<span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Pmf.html#Pmf.bernoulli'\">Pmf.bernoulli'</a> <span class=\"fn\">p</span> <span class=\"fn\">hp</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Pmf.html#Pmf.bernoulli'\">Pmf.bernoulli'</a> (<span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">p</span></span>) <span class=\"fn\">(_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Pmf.lean#L60-L61","name":"Pmf.mem_support_bernoulli'_iff","line":60,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Pmf.html#Pmf.mem_support_bernoulli'_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Pmf.html#Pmf.mem_support_bernoulli'_iff\"><span class=\"name\">Pmf</span>.<span class=\"name\">mem_support_bernoulli'_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#Pmf.support\">Pmf.support</a> (<span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Pmf.html#Pmf.bernoulli'\">Pmf.bernoulli'</a> <span class=\"fn\">p</span> <span class=\"fn\">hp</span></span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">if <span class=\"fn\">b</span> then <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span> else <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Pmf.lean#L57-L58","name":"Pmf.support_bernoulli'","line":57,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Pmf.html#Pmf.support_bernoulli'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Pmf.html#Pmf.support_bernoulli'\"><span class=\"name\">Pmf</span>.<span class=\"name\">support_bernoulli'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#Pmf.support\">Pmf.support</a> (<span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Pmf.html#Pmf.bernoulli'\">Pmf.bernoulli'</a> <span class=\"fn\">p</span> <span class=\"fn\">hp</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{<span class=\"fn\">b</span> | <span class=\"fn\">if <span class=\"fn\">b</span> then <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span> else <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span></span></span>}</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Pmf.lean#L55-L55","name":"Pmf.bernoulli'_apply","line":55,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Pmf.html#Pmf.bernoulli'_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Pmf.html#Pmf.bernoulli'_apply\"><span class=\"name\">Pmf</span>.<span class=\"name\">bernoulli'_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(b : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑(<span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Pmf.html#Pmf.bernoulli'\">Pmf.bernoulli'</a> <span class=\"fn\">p</span> <span class=\"fn\">hp</span></span>) <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if <span class=\"fn\">b</span> then <span class=\"fn\">↑<span class=\"fn\">p</span></span> else <span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Pmf.lean#L49-L51","name":"Pmf.bernoulli'","line":49,"kind":"def","docLink":"./LeanCamCombi/Mathlib/Pmf.html#Pmf.bernoulli'","doc":"A `pmf` which assigns probability `p` to true propositions and `1 - p` to false ones. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Pmf.html#Pmf.bernoulli'\"><span class=\"name\">Pmf</span>.<span class=\"name\">bernoulli'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(p : <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#Pmf\">Pmf</a> <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Pmf.lean#L43-L44","name":"Pmf.map_toMeasure","line":43,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Pmf.html#Pmf.map_toMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Pmf.html#Pmf.map_toMeasure\"><span class=\"name\">Pmf</span>.<span class=\"name\">map_toMeasure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{f : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#Pmf\">Pmf</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(hf : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#Measurable\">Measurable</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpace.html#MeasureTheory.Measure.map\">MeasureTheory.Measure.map</a> <span class=\"fn\">f</span> (<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#Pmf.toMeasure\">Pmf.toMeasure</a> <span class=\"fn\">p</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#Pmf.toMeasure\">Pmf.toMeasure</a> (<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#Pmf.map\">Pmf.map</a> <span class=\"fn\">f</span> <span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Pmf.lean#L40-L40","name":"Pmf.toMeasure_ne_zero","line":40,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Pmf.html#Pmf.toMeasure_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Pmf.html#Pmf.toMeasure_ne_zero\"><span class=\"name\">Pmf</span>.<span class=\"name\">toMeasure_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(p : <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#Pmf\">Pmf</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Basic.html#Pmf.toMeasure\">Pmf.toMeasure</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Pmf.lean#L18-L34","name":"Pmf.map_ofFintype","line":18,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Pmf.html#Pmf.map_ofFintype","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Pmf.html#Pmf.map_ofFintype\"><span class=\"name\">Pmf</span>.<span class=\"name\">map_ofFintype</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/Data/Real/ENNReal.html#ENNReal\">ENNReal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">Finset.univ</span> <span class=\"fn\">fun <span class=\"fn\">a</span> =&gt <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(g : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#Pmf.map\">Pmf.map</a> <span class=\"fn\">g</span> (<span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#Pmf.ofFintype\">Pmf.ofFintype</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Probability/ProbabilityMassFunction/Constructions.html#Pmf.ofFintype\">Pmf.ofFintype</a> (<span class=\"fn\">fun <span class=\"fn\">b</span> =&gt <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> (<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.filter\">Finset.filter</a> (<span class=\"fn\">fun <span class=\"fn\">a</span> =&gt <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span>) <span class=\"fn\">Finset.univ</span></span>) <span class=\"fn\">fun <span class=\"fn\">a</span> =&gt <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></span></span>)\n    <span class=\"fn\">(_ :\n      <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> <span class=\"fn\">Finset.univ</span> <span class=\"fn\">fun <span class=\"fn\">a</span> =&gt\n          <span class=\"fn\">(<span class=\"fn\">fun <span class=\"fn\">b</span> =&gt <span class=\"fn\"><a href=\"./Mathlib/Algebra/BigOperators/Basic.html#Finset.sum\">Finset.sum</a> (<span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Basic.html#Finset.filter\">Finset.filter</a> (<span class=\"fn\">fun <span class=\"fn\">a</span> =&gt <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span>) <span class=\"fn\">Finset.univ</span></span>) <span class=\"fn\">fun <span class=\"fn\">a</span> =&gt <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span></span></span>) <span class=\"fn\">a</span></span></span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a>         <span class=\"fn\">1</span></span>)</span></span></span></div></div>"}]}