{"name":"LeanCamCombi.ErdosRenyi.BollobasContainment","instances":[],"imports":["Init","Mathlib.Analysis.Asymptotics.Asymptotics","LeanCamCombi.Mathlib.Combinatorics.SimpleGraph.Containment","LeanCamCombi.Mathlib.Combinatorics.SimpleGraph.Density","LeanCamCombi.ErdosRenyi.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/ErdosRenyi/BollobasContainment.lean#L33-L36","name":"SimpleGraph.one_statement","line":33,"kind":"theorem","docLink":"./LeanCamCombi/ErdosRenyi/BollobasContainment.html#SimpleGraph.one_statement","doc":"**Bollobás' Graph Containment Lemma, one statement** "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/ErdosRenyi/BollobasContainment.html#SimpleGraph.one_statement\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">one_statement</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\">(<span class=\"fn\">fun <span class=\"fn\">n</span> =&gt <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Density.html#SimpleGraph.maxEdgeSubdensity\">SimpleGraph.maxEdgeSubdensity</a> <span class=\"fn\">H</span></span>)<a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span></span></span>)</span></span>) <a href=\"./Mathlib/Analysis/Asymptotics/Asymptotics.html#Asymptotics.IsLittleO\">=o[</a><span class=\"fn\">Filter.atTop</span><a href=\"./Mathlib/Analysis/Asymptotics/Asymptotics.html#Asymptotics.IsLittleO\">]</a> <span class=\"fn\">fun <span class=\"fn\">n</span> =&gt <span class=\"fn\">↑(<span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">n</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> (<span class=\"fn\">fun <span class=\"fn\">n</span> =&gt <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span> <span class=\"fn\">{<span class=\"fn\">ω</span> | <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">H</span> (<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">n</span> <span class=\"fn\">ω</span></span>)</span>}</span></span></span>) <span class=\"fn\">Filter.atTop</span> (<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">1</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/ErdosRenyi/BollobasContainment.lean#L27-L30","name":"SimpleGraph.zero_statement","line":27,"kind":"theorem","docLink":"./LeanCamCombi/ErdosRenyi/BollobasContainment.html#SimpleGraph.zero_statement","doc":"**Bollobás' Graph Containment Lemma, zero statement** "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/ErdosRenyi/BollobasContainment.html#SimpleGraph.zero_statement\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">zero_statement</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{Ω : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><span class=\"fn\">Ω</span> → <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Ω</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(μ : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">MeasureTheory.Measure</a> <span class=\"fn\">Ω</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Data/Real/NNReal.html#NNReal\">NNReal</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hp : <span class=\"fn\">(<span class=\"fn\">fun <span class=\"fn\">n</span> =&gt <span class=\"fn\">↑(<span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">n</span></span>)</span></span>) <a href=\"./Mathlib/Analysis/Asymptotics/Asymptotics.html#Asymptotics.IsLittleO\">=o[</a><span class=\"fn\">Filter.atTop</span><a href=\"./Mathlib/Analysis/Asymptotics/Asymptotics.html#Asymptotics.IsLittleO\">]</a> <span class=\"fn\">fun <span class=\"fn\">n</span> =&gt <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Density.html#SimpleGraph.maxEdgeSubdensity\">SimpleGraph.maxEdgeSubdensity</a> <span class=\"fn\">H</span></span>)<a href=\"./Mathlib/Algebra/Group/Defs.html#Inv.inv\">⁻¹</a></span></span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Basic.html#Filter.Tendsto\">Filter.Tendsto</a> (<span class=\"fn\">fun <span class=\"fn\">n</span> =&gt <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">μ</span></span> <span class=\"fn\">{<span class=\"fn\">ω</span> | <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">H</span> (<span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">n</span> <span class=\"fn\">ω</span></span>)</span>}</span></span></span>) <span class=\"fn\">Filter.atTop</span> (<span class=\"fn\"><a href=\"./Mathlib/Topology/Basic.html#nhds\">nhds</a> <span class=\"fn\">0</span></span>)</span></div></div>"}]}