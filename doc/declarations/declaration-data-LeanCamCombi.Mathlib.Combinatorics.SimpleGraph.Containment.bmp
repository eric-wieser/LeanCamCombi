{"name":"LeanCamCombi.Mathlib.Combinatorics.SimpleGraph.Containment","instances":[{"typeNames":["Set.Elem","Sym2","SimpleGraph.edgeSet","SimpleGraph.kill"],"name":"SimpleGraph.kill.EdgeSet.fintype","className":"Fintype"}],"imports":["Init","Mathlib.Algebra.BigOperators.Basic","LeanCamCombi.Mathlib.Combinatorics.SimpleGraph.Subgraph","LeanCamCombi.Mathlib.Data.Sym.Sym2"],"declarations":[{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L316-L330","name":"SimpleGraph.le_card_edgeFinset_kill","line":316,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.le_card_edgeFinset_kill","doc":"Removing an edge from `H` for each subgraph isomorphic to `G` means that the number of edges\nwe've removed is at most the number of copies of `G` in `H`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.le_card_edgeFinset_kill\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">le_card_edgeFinset_kill</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">SimpleGraph.edgeSet</a> <span class=\"fn\">H</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">Finset.card</a> (<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeFinset\">SimpleGraph.edgeFinset</a> <span class=\"fn\">H</span></span>)</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount\">SimpleGraph.copyCount</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">Finset.card</a> (<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeFinset\">SimpleGraph.edgeFinset</a> (<span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill\">SimpleGraph.kill</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L311-L312","name":"SimpleGraph.kill.EdgeSet.fintype","line":311,"kind":"instance","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill.EdgeSet.fintype","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill.EdgeSet.fintype\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">kill</span>.<span class=\"name\">EdgeSet</span>.<span class=\"name\">fintype</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">SimpleGraph.edgeSet</a> <span class=\"fn\">H</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">↑(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">SimpleGraph.edgeSet</a> (<span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill\">SimpleGraph.kill</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L284-L307","name":"SimpleGraph.not_isContained_kill","line":284,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.not_isContained_kill","doc":"Removing an edge from `H` for each subgraph isomorphic to `G` results in a graph that doesn't\ncontain `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.not_isContained_kill\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">not_isContained_kill</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hG : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/BoundedOrder.html#Bot.bot\">⊥</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G</span> (<span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill\">SimpleGraph.kill</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L277-L280","name":"SimpleGraph.kill_of_not_isContained","line":277,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill_of_not_isContained","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill_of_not_isContained\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">kill_of_not_isContained</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hGH : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill\">SimpleGraph.kill</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">H</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L270-L275","name":"SimpleGraph.kill_eq_right","line":270,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill_eq_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill_eq_right\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">kill_eq_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hG : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/BoundedOrder.html#Bot.bot\">⊥</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill\">SimpleGraph.kill</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">H</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L262-L263","name":"SimpleGraph.bot_kill","line":262,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.bot_kill","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.bot_kill\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">bot_kill</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill\">SimpleGraph.kill</a> <a href=\"./Mathlib/Order/BoundedOrder.html#Bot.bot\">⊥</a> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">H</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L260-L260","name":"SimpleGraph.kill_le","line":260,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill_le","doc":"Removing an edge from `H` for each subgraph isomorphic to `G` results in a subgraph of `H`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">kill_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill\">SimpleGraph.kill</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L252-L257","name":"SimpleGraph.kill_def","line":252,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill_def\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">kill_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill\">SimpleGraph.kill</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if hG : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/BoundedOrder.html#Bot.bot\">⊥</a></span> then <span class=\"fn\">H</span>\n  else\n    <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.deleteEdges\">SimpleGraph.deleteEdges</a> <span class=\"fn\">H</span>\n      (<span class=\"fn\">⋃ (H' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">SimpleGraph.Subgraph</a> <span class=\"fn\">H</span></span>) (hH' : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> (<span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso\">≃g</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">SimpleGraph.Subgraph.coe</a> <span class=\"fn\">H'</span></span></span>)</span>),\n        <span class=\"fn\">{<span class=\"fn\"><a href=\"./Mathlib/Data/Set/Basic.html#Set.Nonempty.some\">Set.Nonempty.some</a> <span class=\"fn\">(_ : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Basic.html#Set.Nonempty\">Set.Nonempty</a> (<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">SimpleGraph.Subgraph.edgeSet</a> <span class=\"fn\">H'</span></span>)</span>)</span></span>}</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L252-L257","name":"SimpleGraph.kill","line":252,"kind":"def","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill","doc":"`G.kill H` is a subgraph of `H` where an edge from every subgraph isomorphic to `G` was removed.\nAs such, it is a big subgraph of `H` that does not contain any subgraph isomorphic to `G`, unless\n`G` had no edges to start with. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.kill\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">kill</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L226-L231","name":"SimpleGraph.copyCount_le_labelledCopyCount","line":226,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount_le_labelledCopyCount","doc":"There's more labelled copies of `H` of-`G` than unlabelled ones. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount_le_labelledCopyCount\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">copyCount_le_labelledCopyCount</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount\">SimpleGraph.copyCount</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.labelledCopyCount\">SimpleGraph.labelledCopyCount</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L222-L223","name":"SimpleGraph.labelledCopyCount_pos","line":222,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.labelledCopyCount_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.labelledCopyCount_pos\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">labelledCopyCount_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.labelledCopyCount\">SimpleGraph.labelledCopyCount</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L219-L220","name":"SimpleGraph.labelledCopyCount_eq_zero","line":219,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.labelledCopyCount_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.labelledCopyCount_eq_zero\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">labelledCopyCount_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.labelledCopyCount\">SimpleGraph.labelledCopyCount</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L209-L216","name":"SimpleGraph.labelledCopyCount_of_isEmpty","line":209,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.labelledCopyCount_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.labelledCopyCount_of_isEmpty\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">labelledCopyCount_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.labelledCopyCount\">SimpleGraph.labelledCopyCount</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L206-L207","name":"SimpleGraph.labelledCopyCount","line":206,"kind":"def","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.labelledCopyCount","doc":"`G.labelledCopyCount H` is the number of labelled copies of `G` in `H`. See\n`SimpleGraph.copyCount` for the number of unlabelled copies. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.labelledCopyCount\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">labelledCopyCount</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L196-L197","name":"SimpleGraph.copyCount_pos","line":196,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount_pos\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">copyCount_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt</a> <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount\">SimpleGraph.copyCount</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L193-L194","name":"SimpleGraph.copyCount_eq_zero","line":193,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount_eq_zero\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">copyCount_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount\">SimpleGraph.copyCount</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L179-L191","name":"SimpleGraph.copyCount_of_isEmpty","line":179,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount_of_isEmpty\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">copyCount_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount\">SimpleGraph.copyCount</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L160-L177","name":"SimpleGraph.copyCount_bot","line":160,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount_bot\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">copyCount_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount\">SimpleGraph.copyCount</a> <a href=\"./Mathlib/Order/BoundedOrder.html#Bot.bot\">⊥</a> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L157-L158","name":"SimpleGraph.copyCount","line":157,"kind":"def","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount","doc":"`G.copyCount H` is the number of unlabelled copies of `G` in `H`.\nSee `SimpleGraph.labelledCopyCount` for the number of labelled copies. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.copyCount\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">copyCount</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Basic.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L144-L144","name":"SimpleGraph.IsIndContained.exists_subgraph","line":144,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained.exists_subgraph","doc":"**Alias** of the forward direction of `SimpleGraph.isIndContained_iff_exists_subgraph`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained.exists_subgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsIndContained</span>.<span class=\"name\">exists_subgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained\">SimpleGraph.IsIndContained</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span> → <span class=\"fn\">∃ <span class=\"fn\">H'</span> <span class=\"fn\">_e</span>, <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsInduced'\">SimpleGraph.Subgraph.IsInduced'</a> <span class=\"fn\">H'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L133-L142","name":"SimpleGraph.isIndContained_iff_exists_subgraph","line":133,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isIndContained_iff_exists_subgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isIndContained_iff_exists_subgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">isIndContained_iff_exists_subgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained\">SimpleGraph.IsIndContained</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">H'</span> <span class=\"fn\">_e</span>, <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsInduced'\">SimpleGraph.Subgraph.IsInduced'</a> <span class=\"fn\">H'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L128-L131","name":"SimpleGraph.isIndContained_of_isEmpty","line":128,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isIndContained_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isIndContained_of_isEmpty\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">isIndContained_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained\">SimpleGraph.IsIndContained</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L126-L126","name":"SimpleGraph.IsIndContained.trans","line":126,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained.trans\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsIndContained</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained\">SimpleGraph.IsIndContained</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained\">SimpleGraph.IsIndContained</a> <span class=\"fn\">H</span> <span class=\"fn\">I</span></span> → <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained\">SimpleGraph.IsIndContained</a> <span class=\"fn\">G</span> <span class=\"fn\">I</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L125-L125","name":"SimpleGraph.isIndContained_rfl","line":125,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isIndContained_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isIndContained_rfl\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">isIndContained_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained\">SimpleGraph.IsIndContained</a> <span class=\"fn\">G</span> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L124-L124","name":"SimpleGraph.isIndContained_refl","line":124,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isIndContained_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isIndContained_refl\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">isIndContained_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained\">SimpleGraph.IsIndContained</a> <span class=\"fn\">G</span> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L118-L122","name":"SimpleGraph.Subgraph.IsInduced'.isIndContained","line":118,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.Subgraph.IsInduced'.isIndContained","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.Subgraph.IsInduced'.isIndContained\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsInduced'</span>.<span class=\"name\">isIndContained</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">SimpleGraph.Subgraph</a> <span class=\"fn\">G</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(hG' : <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsInduced'\">SimpleGraph.Subgraph.IsInduced'</a> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained\">SimpleGraph.IsIndContained</a> (<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">SimpleGraph.Subgraph.coe</a> <span class=\"fn\">G'</span></span>) <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L116-L116","name":"SimpleGraph.Iso.isIndContained'","line":116,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.Iso.isIndContained'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.Iso.isIndContained'\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Iso</span>.<span class=\"name\">isIndContained'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso\">≃g</a> <span class=\"fn\">H</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained\">SimpleGraph.IsIndContained</a> <span class=\"fn\">H</span> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L115-L115","name":"SimpleGraph.Iso.isIndContained","line":115,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.Iso.isIndContained","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.Iso.isIndContained\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Iso</span>.<span class=\"name\">isIndContained</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso\">≃g</a> <span class=\"fn\">H</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained\">SimpleGraph.IsIndContained</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L114-L114","name":"SimpleGraph.IsIndContained.isContained","line":114,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained.isContained","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained.isContained\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsIndContained</span>.<span class=\"name\">isContained</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₁ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₂ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained\">SimpleGraph.IsIndContained</a> <span class=\"fn\">G₁</span> <span class=\"fn\">G₂</span></span> → <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G₁</span> <span class=\"fn\">G₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L112-L112","name":"SimpleGraph.«term_⊴_»","line":112,"kind":"def","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.«term_⊴_»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.«term_⊴_»\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">«term_⊴_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L110-L110","name":"SimpleGraph.IsIndContained","line":110,"kind":"def","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained","doc":"A simple graph `G` is contained in a simple graph `H` if there exists an induced subgraph of `H`\nisomorphic to `G`. This is denoted by `G ⊴ H`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsIndContained\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsIndContained</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L97-L97","name":"SimpleGraph.IsContained.exists_subgraph","line":97,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained.exists_subgraph","doc":"**Alias** of the forward direction of `SimpleGraph.isContained_iff_exists_subgraph`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained.exists_subgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsContained</span>.<span class=\"name\">exists_subgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span> → <span class=\"fn\">∃ <span class=\"fn\">H'</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> (<span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso\">≃g</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">SimpleGraph.Subgraph.coe</a> <span class=\"fn\">H'</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L90-L95","name":"SimpleGraph.isContained_iff_exists_subgraph","line":90,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isContained_iff_exists_subgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isContained_iff_exists_subgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">isContained_iff_exists_subgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">H'</span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> (<span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso\">≃g</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">SimpleGraph.Subgraph.coe</a> <span class=\"fn\">H'</span></span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L86-L88","name":"SimpleGraph.bot_isContained","line":86,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.bot_isContained","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.bot_isContained\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">bot_isContained</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(f : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding\">↪</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <a href=\"./Mathlib/Order/BoundedOrder.html#Bot.bot\">⊥</a> <span class=\"fn\">H</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L82-L84","name":"SimpleGraph.isContained_of_isEmpty","line":82,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isContained_of_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isContained_of_isEmpty\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">isContained_of_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L80-L80","name":"SimpleGraph.IsContained.trans_le","line":80,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained.trans_le","doc":"**Alias** of `SimpleGraph.IsContained.mono_right`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained.trans_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsContained</span>.<span class=\"name\">trans_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₁ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₂ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₃ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁₂ : <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G₁</span> <span class=\"fn\">G₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂₃ : <span class=\"fn\"><span class=\"fn\">G₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G₃</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G₁</span> <span class=\"fn\">G₃</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L77-L78","name":"SimpleGraph.IsContained.mono_right","line":77,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained.mono_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained.mono_right\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsContained</span>.<span class=\"name\">mono_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₁ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₂ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₃ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁₂ : <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G₁</span> <span class=\"fn\">G₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂₃ : <span class=\"fn\"><span class=\"fn\">G₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G₃</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G₁</span> <span class=\"fn\">G₃</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L74-L75","name":"SimpleGraph.IsContained.mono_left","line":74,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained.mono_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained.mono_left\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsContained</span>.<span class=\"name\">mono_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₁ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₂ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₃ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h₁₂ : <span class=\"fn\"><span class=\"fn\">G₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(h₂₃ : <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G₂</span> <span class=\"fn\">G₃</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G₁</span> <span class=\"fn\">G₃</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L72-L72","name":"SimpleGraph.IsContained.trans","line":72,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained.trans\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsContained</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{γ : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{I : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">H</span> <span class=\"fn\">I</span></span> → <span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G</span> <span class=\"fn\">I</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L71-L71","name":"SimpleGraph.isContained_rfl","line":71,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isContained_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isContained_rfl\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">isContained_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G</span> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L70-L70","name":"SimpleGraph.isContained_refl","line":70,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isContained_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isContained_refl\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">isContained_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G</span> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L67-L68","name":"SimpleGraph.Subgraph.coe_isContained","line":67,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.Subgraph.coe_isContained","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.Subgraph.coe_isContained\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coe_isContained</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G' : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">SimpleGraph.Subgraph</a> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> (<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">SimpleGraph.Subgraph.coe</a> <span class=\"fn\">G'</span></span>) <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L65-L65","name":"SimpleGraph.Iso.isContained'","line":65,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.Iso.isContained'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.Iso.isContained'\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Iso</span>.<span class=\"name\">isContained'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso\">≃g</a> <span class=\"fn\">H</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">H</span> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L64-L64","name":"SimpleGraph.Iso.isContained","line":64,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.Iso.isContained","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.Iso.isContained\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Iso</span>.<span class=\"name\">isContained</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(e : <span class=\"fn\"><span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Iso\">≃g</a> <span class=\"fn\">H</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G</span> <span class=\"fn\">H</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L62-L62","name":"SimpleGraph.isContained_of_le","line":62,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isContained_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.isContained_of_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">isContained_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₁ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{G₂ : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(h : <span class=\"fn\"><span class=\"fn\">G₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\">SimpleGraph.IsContained</a> <span class=\"fn\">G₁</span> <span class=\"fn\">G₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L60-L60","name":"SimpleGraph.«term_⊑_»","line":60,"kind":"def","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.«term_⊑_»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.«term_⊑_»\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">«term_⊑_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.lean#L57-L58","name":"SimpleGraph.IsContained","line":57,"kind":"def","docLink":"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained","doc":"A simple graph `G` is contained in a simple graph `H` if there exists a subgraph of `H`\nisomorphic to `G`. This is denoted by `G ⊑ H`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Combinatorics/SimpleGraph/Containment.html#SimpleGraph.IsContained\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsContained</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{β : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(G : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(H : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}