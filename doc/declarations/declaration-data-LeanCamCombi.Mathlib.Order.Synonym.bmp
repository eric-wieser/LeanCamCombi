{"name":"LeanCamCombi.Mathlib.Order.Synonym","instances":[],"imports":["Init","Mathlib.Order.Synonym"],"declarations":[{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Order/Synonym.lean#L7-L7","name":"Lex.exists","line":7,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Order/Synonym.html#Lex.exists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Order/Synonym.html#Lex.exists\"><span class=\"name\">Lex</span>.<span class=\"name\">exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">∃ <span class=\"fn\">a</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">a</span>, <span class=\"fn\"><span class=\"fn\">p</span> (<span class=\"fn\">↑<span class=\"fn\">toLex</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/YaelDillies/LeanCamCombi/blob/41ed909d6e8b5e6b618db6412ed63ba09eba61c3//LeanCamCombi/Mathlib/Order/Synonym.lean#L6-L6","name":"Lex.forall","line":6,"kind":"theorem","docLink":"./LeanCamCombi/Mathlib/Order/Synonym.html#Lex.forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./LeanCamCombi/Mathlib/Order/Synonym.html#Lex.forall\"><span class=\"name\">Lex</span>.<span class=\"name\">forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{α : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{p : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Synonym.html#Lex\">Lex</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">p</span> (<span class=\"fn\">↑<span class=\"fn\">toLex</span> <span class=\"fn\">a</span></span>)</span></span></span></div></div>"}]}