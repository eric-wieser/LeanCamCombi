/-
Copyright (c) 2021 Ya√´l Dillies, Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Bhavik Mehta
-/
import Mathlib.Analysis.SpecificLimits.Basic
import LeanCamCombi.SimplicialComplex.Basic

#align_import simplicial_complex.subdivision

/-!
# Subdivision of simplicial complexes
-/

open Geometry Finset Set

variable {ùïú E : Type*}

namespace Geometry.SimplicialComplex

section OrderedRing

variable [OrderedRing ùïú] [AddCommGroup E] [Module ùïú E] {m : ‚Ñï} {K K‚ÇÅ K‚ÇÇ K‚ÇÉ : SimplicialComplex ùïú E}

/-- `K‚ÇÅ` is a subdivision of `K‚ÇÇ` iff their underlying space is the same and each face of `K‚ÇÅ` is
contained in some face of `K‚ÇÇ`. -/
def Subdivides (K‚ÇÅ K‚ÇÇ : SimplicialComplex ùïú E) : Prop :=
  K‚ÇÅ.Space = K‚ÇÇ.Space ‚àß
    ‚àÄ ‚¶És‚ÇÅ‚¶Ñ, s‚ÇÅ ‚àà K‚ÇÅ ‚Üí ‚àÉ s‚ÇÇ ‚àà K‚ÇÇ, convexHull ùïú (s‚ÇÅ : Set E) ‚äÜ convexHull ùïú (s‚ÇÇ : Set E)

@[refl]
lemma Subdivides.refl (K : SimplicialComplex ùïú E) : K.Subdivides K :=
  ‚ü®rfl, fun s hs => ‚ü®s, hs, Subset.rfl‚ü©‚ü©

lemma Subdivides.rfl : K.Subdivides K :=
  Subdivides.refl _

@[trans]
lemma Subdivides.trans (h‚ÇÅ‚ÇÇ : K‚ÇÅ.Subdivides K‚ÇÇ) (h‚ÇÇ‚ÇÉ : K‚ÇÇ.Subdivides K‚ÇÉ) : K‚ÇÅ.Subdivides K‚ÇÉ :=
  ‚ü®h‚ÇÅ‚ÇÇ.1.trans h‚ÇÇ‚ÇÉ.1, fun s‚ÇÅ hs‚ÇÅ =>
    let ‚ü®s‚ÇÇ, hs‚ÇÇ, hs‚ÇÅ‚ÇÇ‚ü© := h‚ÇÅ‚ÇÇ.2 hs‚ÇÅ
    let ‚ü®s‚ÇÉ, hs‚ÇÉ, hs‚ÇÇ‚ÇÉ‚ü© := h‚ÇÇ‚ÇÉ.2 hs‚ÇÇ
    ‚ü®s‚ÇÉ, hs‚ÇÉ, hs‚ÇÅ‚ÇÇ.trans hs‚ÇÇ‚ÇÉ‚ü©‚ü©

end OrderedRing

section SeminormedAddCommGroup

variable [SeminormedAddCommGroup E] [T2Space E] [NormedSpace ‚Ñù E] {s t : Finset E} {m : ‚Ñï}
  {K‚ÇÅ K‚ÇÇ : SimplicialComplex ‚Ñù E}

lemma subdivides_iff_combiInteriors_subset_combiInteriors :
    K‚ÇÅ.Subdivides K‚ÇÇ ‚Üî
      K‚ÇÇ.Space ‚äÜ K‚ÇÅ.Space ‚àß ‚àÄ s‚ÇÅ ‚àà K‚ÇÅ, ‚àÉ s‚ÇÇ ‚àà K‚ÇÇ, combiInterior ‚Ñù s‚ÇÅ ‚äÜ combiInterior ‚Ñù s‚ÇÇ := by
  refine'
    ‚ü®fun h => ‚ü®h.1.symm.Subset, fun s hs => _‚ü©, fun h =>
      ‚ü®h.1.antisymm' fun x hx => _, fun s‚ÇÅ hs‚ÇÅ => _‚ü©‚ü©
  ¬∑ obtain ‚ü®t, ht, hst‚ü© := h.2 hs
    obtain ‚ü®u, hut, hu, hsu‚ü© :=
      simplex_combiInteriors_split_interiors_nonempty (K‚ÇÅ.nonempty hs) (K‚ÇÇ.indep ht) hst
    exact ‚ü®u, K‚ÇÇ.down_closed' ht hut hu, hsu‚ü©
  ¬∑ obtain ‚ü®s‚ÇÅ, hs‚ÇÅ, hx‚ü© := mem_space_iff.1 hx
    obtain ‚ü®s‚ÇÇ, hs‚ÇÇ, hs‚ÇÅs‚ÇÇ‚ü© := h.2 _ hs‚ÇÅ
    rw [mem_space_iff]
    exact
      ‚ü®s‚ÇÇ, hs‚ÇÇ,
        convexHull_subset_convexHull_of_combiInterior_subset_combiInterior (K‚ÇÅ.indep hs‚ÇÅ)
          (K‚ÇÇ.indep hs‚ÇÇ) hs‚ÇÅs‚ÇÇ hx‚ü©
  ¬∑ obtain ‚ü®s‚ÇÇ, hs‚ÇÇ, hs‚ÇÅs‚ÇÇ‚ü© := h.2 _ hs‚ÇÅ
    exact
      ‚ü®_, hs‚ÇÇ,
        convexHull_subset_convexHull_of_combiInterior_subset_combiInterior (K‚ÇÅ.indep hs‚ÇÅ)
          (K‚ÇÇ.indep hs‚ÇÇ) hs‚ÇÅs‚ÇÇ‚ü©

/- ./././Mathport/Syntax/Translate/Basic.lean:641:2: warning: expanding binder collection (F ¬´expr ‚äÜ ¬ª K‚ÇÅ.faces) -/
lemma subdivides_iff_partition :
    K‚ÇÅ.Subdivides K‚ÇÇ ‚Üî
      (K‚ÇÅ.faces.Nonempty ‚Üí K‚ÇÇ.faces.Nonempty) ‚àß
        K‚ÇÅ.Space ‚äÜ K‚ÇÇ.Space ‚àß
          ‚àÄ s‚ÇÇ ‚àà K‚ÇÇ,
            ‚àÉ (F : _) (_ : F ‚äÜ K‚ÇÅ.faces), combiInterior ‚Ñù s‚ÇÇ = ‚ãÉ s‚ÇÅ ‚àà F, combiInterior ‚Ñù s‚ÇÅ := by
  constructor
  ¬∑ rintro ‚ü®hspace, hsubdiv‚ü©
    refine' ‚ü®_, hspace.le, fun s hs => _‚ü©
    ¬∑ rintro ‚ü®s‚ÇÅ, hs‚ÇÅ‚ü©
      obtain ‚ü®s‚ÇÇ, hs‚ÇÇ, hs‚ÇÅs‚ÇÇ‚ü© := hsubdiv hs‚ÇÅ
      exact ‚ü®s‚ÇÇ, hs‚ÇÇ‚ü©
    refine' ‚ü®{t | t ‚àà K‚ÇÅ ‚àß combiInterior ‚Ñù t ‚äÜ combiInterior ‚Ñù s}, fun t ht => ht.1, _‚ü©
    ext x
    refine' ‚ü®fun hxs => _, _‚ü©
    ¬∑ have hxspace := mem_space_iff.2 ‚ü®s, hs, hxs.1‚ü©
      rw [‚Üê hspace, ‚Üê combiInteriors_cover, mem_Union‚ÇÇ] at hxspace
      obtain ‚ü®t, ht, hxt‚ü© := hxspace
      refine' mem_Union‚ÇÇ_of_mem ‚ü®ht, fun y hyt => _‚ü© hxt
      obtain ‚ü®u, hu, htu‚ü© := hsubdiv ht
      obtain ‚ü®W, hWu, htW‚ü© := simplex_combiInteriors_split_interiors (K‚ÇÇ.indep hu) htu
      rw [disjoint_interiors hs (K‚ÇÇ.down_closed hu hWu _) hxs (htW hxt)]
      exact htW hyt
      sorry
    ¬∑ rw [mem_Union‚ÇÇ]
      rintro ‚ü®t, ‚ü®ht, hts‚ü©, hxt‚ü©
      exact hts hxt
  ¬∑ rintro ‚ü®hempty, hspace, hpartition‚ü©
    have hspace : K‚ÇÅ.space = K‚ÇÇ.space := by
      refine' hspace.antisymm fun x hx => _
      rw [‚Üê combiInteriors_cover, mem_Union‚ÇÇ] at hx ‚ä¢
      obtain ‚ü®s, hs, hxs‚ü© := hx
      obtain ‚ü®F, hF, hsint‚ü© := hpartition _ hs
      rw [hsint, mem_Union‚ÇÇ] at hxs
      obtain ‚ü®t, ht, hxt‚ü© := hxs
      exact ‚ü®t, hF ht, hxt‚ü©
    refine' ‚ü®hspace, fun s hs => _‚ü©
    obtain rfl | hsnonempty := s.eq_empty_or_nonempty
    ¬∑ obtain ‚ü®t, ht‚ü© := hempty ‚ü®_, hs‚ü©
      exact ‚ü®t, ht, by simp‚ü©
    obtain ‚ü®x, hx‚ü© := hsnonempty.combiInterior (K‚ÇÅ.indep hs)
    have hxspace := mem_space_iff.2 ‚ü®s, hs, hx.1‚ü©
    rw [hspace, ‚Üê combiInteriors_cover, mem_Union‚ÇÇ] at hxspace
    obtain ‚ü®t, ht, hxt‚ü© := hxspace
    use t, ht
    rw [‚Üê closure_combiInterior_eq_convexHull (K‚ÇÅ.indep hs)]
    refine' closure_minimal (fun x' hx' => _) (is_closed_convex_hull _)
    have hxspace := mem_space_iff.2 ‚ü®s, hs, hx'.1‚ü©
    rw [hspace, ‚Üê combiInteriors_cover, mem_Union‚ÇÇ] at hxspace
    obtain ‚ü®t', ht', hxt'‚ü© := hxspace
    suffices htt' : t = t'
    ¬∑ rw [htt']
      exact hxt'.1
    obtain ‚ü®F, hF, hinterior‚ü© := hpartition _ ht
    obtain ‚ü®F', hF', hinterior'‚ü© := hpartition _ ht'
    apply disjoint_interiors ht ht' (_ : x ‚àà _) _
    ¬∑ rw [hinterior, mem_Union‚ÇÇ] at hxt ‚ä¢
      obtain ‚ü®u, hu, hxu‚ü© := hxt
      use u, hu, hxu
    ¬∑ rw [hinterior', mem_Union‚ÇÇ] at hxt' ‚ä¢
      obtain ‚ü®u, hu, hxu‚ü© := hxt'
      refine' ‚ü®u, hu, _‚ü©
      rw [‚Üê disjoint_interiors hs (hF' hu) hx' hxu]
      exact hx

instance : IsPartialOrder (SimplicialComplex ‚Ñù E) Subdivides
    where
  refl := Subdivides.refl
  trans K‚ÇÅ K‚ÇÇ K‚ÇÉ := Subdivides.trans
  antisymm := by
    suffices aux_lemma :
      ‚àÄ {K‚ÇÅ K‚ÇÇ : simplicial_complex ‚Ñù E},
        K‚ÇÅ.Subdivides K‚ÇÇ ‚Üí K‚ÇÇ.Subdivides K‚ÇÅ ‚Üí ‚àÄ {s}, s ‚àà K‚ÇÅ.faces ‚Üí s ‚àà K‚ÇÇ.faces
    ¬∑ rintro K‚ÇÅ K‚ÇÇ h‚ÇÅ h‚ÇÇ
      ext s
      exact ‚ü®fun hs => aux_lemma h‚ÇÅ h‚ÇÇ hs, fun hs => aux_lemma h‚ÇÇ h‚ÇÅ hs‚ü©
    rintro K‚ÇÅ K‚ÇÇ h‚ÇÅ h‚ÇÇ s hs
    rw [subdivides_iff_partition] at h‚ÇÇ h‚ÇÅ
    obtain ‚ü®x, hxs‚ü© := (K‚ÇÅ.nonempty hs).combiInterior (K‚ÇÅ.indep hs)
    obtain ‚ü®F, hF, hFs‚ü© := h‚ÇÇ.2.2 _ hs
    have hxs' := hxs
    rw [hFs, mem_Union‚ÇÇ] at hxs'
    obtain ‚ü®t, ht, hxt‚ü© := hxs'
    obtain ‚ü®F', hF', hF't‚ü© := h‚ÇÅ.2.2 _ (hF ht)
    rw [hF't, mem_Union‚ÇÇ] at hxt
    obtain ‚ü®u, hu, hxu‚ü© := hxt
    have := disjoint_interiors hs (hF' hu) hxs hxu
    subst this
    suffices h : s = t
    ¬∑ rw [h]
      exact hF ht
    refine' combiInterior.inj (K‚ÇÅ.indep hs) (K‚ÇÇ.indep <| hF ht) (subset.antisymm _ _)
    ¬∑ rw [hF't]
      exact subset_bUnion_of_mem hu
    ¬∑ rw [hFs]
      exact subset_bUnion_of_mem ht

end SeminormedAddCommGroup

/-
/-- max diameter of  simplices -/
def simplicial_complex.mesh_size (S : simplicial_complex ùïú E) : ùïú := sorry

def barycentrisation : list (fin m ‚Üí ùïú) ‚Üí fin m ‚Üí ùïú :=
  Œª L,

def simplicial_complex.barycentric_subdivision (S : simplicial_complex ùïú E) :
  simplicial_complex ùïú E :=
{ faces := {s | ‚àÉ {L : list (fin m ‚Üí ùïú)}, list.to_finset L ‚àà S.faces ‚àß s = },
  indep := _,
  down_closed := _,
  disjoint := _ }-/
end Geometry.SimplicialComplex
