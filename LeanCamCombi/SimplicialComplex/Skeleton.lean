/-
Copyright (c) 2021 Ya√´l Dillies, Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Ya√´l Dillies, Bhavik Mehta
-/
import LeanCamCombi.SimplicialComplex.Pure

#align_import simplicial_complex.skeleton

/-!
# Skeleton of a simplicial complex
-/

open Finset Geometry

variable {ùïú E : Type*}

namespace Geometry.SimplicialComplex

section OrderedRing

variable [OrderedRing ùïú] [AddCommGroup E] [Module ùïú E] {m n k : ‚Ñï} {K : SimplicialComplex ùïú E}
  {s t : Finset E} {A : Set (Finset E)}

/-- The `k`-skeleton of a simplicial complex is the simplicial complex made of its simplices of
dimension less than `k`. -/
def skeleton (K : SimplicialComplex ùïú E) (k : ‚Ñï) : SimplicialComplex ùïú E :=
  K.ofSubcomplex' {s | s ‚àà K ‚àß s.card ‚â§ k + 1} (fun s ‚ü®hs, _‚ü© => hs) fun s t hs hts ht =>
    ‚ü®K.down_closed' hs.1 hts ht, (card_le_of_subset hts).trans hs.2‚ü©

lemma skeleton_le : K.skeleton k ‚â§ K :=
  K.of_subcomplex_le _

lemma skeleton_bot (k : ‚Ñï) : (‚ä• : SimplicialComplex ùïú E).skeleton k = ‚ä• :=
  of_subcomplex_bot _

lemma skeleton_nonempty_iff : (K.skeleton k).faces.Nonempty ‚Üî K.faces.Nonempty := by
  refine' ‚ü®Set.Nonempty.mono skeleton_le, _‚ü©
  rintro ‚ü®s, hs‚ü©
  obtain ‚ü®x, hx‚ü© := K.nonempty hs
  refine' ‚ü®{x}, K.down_closed' hs (singleton_subset_iff.2 hx) <| singleton_nonempty _, _‚ü©
  rw [card_singleton]
  exact le_add_self

lemma Pure.skeletonOfLe (hK : K.pure n) (h : k ‚â§ n) : (K.skeleton k).pure k := by
  refine' ‚ü®fun s hs => hs.2, _‚ü©
  rintro s ‚ü®‚ü®hs, hscard‚ü©, hsmax‚ü©
  obtain ‚ü®t, ht, hst, htcard‚ü© := hK.exists_face_of_card_le (add_le_add_right h 1) hs hscard
  rwa [hsmax ‚ü®ht, htcard.le‚ü© hst]

end OrderedRing

section LinearOrderedField

variable [LinearOrderedField ùïú] [AddCommGroup E] [Module ùïú E] [FiniteDimensional ùïú E] {m n k : ‚Ñï}
  {K : SimplicialComplex ùïú E} {s t : Finset E} {A : Set (Finset E)}

lemma Pure.skeleton (hK : K.pure n) : (K.skeleton k).pure (min k n) := by
  obtain hn | hn := le_total k n
  ¬∑ rw [min_eq_left hn]
    exact hK.skeleton_of_le hn
  ¬∑ rw [min_eq_right hn]
    refine' ‚ü®fun s hs => hK.1 <| skeleton_le hs, fun s hs => _‚ü©
    obtain ‚ü®t, ht, hst‚ü© := subfacet (skeleton_le hs.1)
    rw [hs.2 ‚ü®facets_subset ht, (hK.2 ht).le.trans (add_le_add_right hn _)‚ü© hst]
    exact hK.2 ht

end LinearOrderedField

end Geometry.SimplicialComplex
