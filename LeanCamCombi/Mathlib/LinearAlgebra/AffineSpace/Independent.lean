import Mathlib.LinearAlgebra.AffineSpace.Independent

open Finset
open scoped BigOperators

variable {ùïú E Œπ : Type*} [Ring ùïú] [AddCommGroup E] [Module ùïú E] {p : Œπ ‚Üí E} {w w‚ÇÅ w‚ÇÇ : Œπ ‚Üí ùïú}
  {s : Finset Œπ} {m n : ‚Ñï}

lemma AffineIndependent.eq_zero_of_sum_eq_zero (hp : AffineIndependent ùïú p)
    (hw‚ÇÄ : ‚àë i in s, w i = 0) (hw‚ÇÅ : ‚àë i in s, w i ‚Ä¢ p i = 0) : ‚àÄ i ‚àà s, w i = 0 :=
  affineIndependent_iff.1 hp _ _ hw‚ÇÄ hw‚ÇÅ

lemma AffineIndependent.eq_of_sum_eq_sum (hp : AffineIndependent ùïú p)
    (hw : ‚àë i in s, w‚ÇÅ i = ‚àë i in s, w‚ÇÇ i) (hwp : ‚àë i in s, w‚ÇÅ i ‚Ä¢ p i = ‚àë i in s, w‚ÇÇ i ‚Ä¢ p i) :
    ‚àÄ i ‚àà s, w‚ÇÅ i = w‚ÇÇ i := by
  refine' fun i hi => sub_eq_zero.1 (hp.eq_zero_of_sum_eq_zero (w := w‚ÇÅ - w‚ÇÇ) _ _ _ hi)
  all_goals simpa [sub_mul, sub_smul, sub_eq_zero]

lemma AffineIndependent.eq_zero_of_sum_eq_zero_subtype {s : Finset E}
    (hp : AffineIndependent ùïú ((‚Üë) : s ‚Üí E)) {w : E ‚Üí ùïú} (hw‚ÇÄ : ‚àë x in s, w x = 0)
    (hw‚ÇÅ : ‚àë x in s, w x ‚Ä¢ x = 0) : ‚àÄ x ‚àà s, w x = 0 := by
  rw [‚Üê sum_attach] at hw‚ÇÄ hw‚ÇÅ
  exact fun x hx => hp.eq_zero_of_sum_eq_zero hw‚ÇÄ hw‚ÇÅ ‚ü®x, hx‚ü© (mem_univ _)

lemma AffineIndependent.eq_of_sum_eq_sum_subtype {s : Finset E}
    (hp : AffineIndependent ùïú ((‚Üë) : s ‚Üí E)) {w‚ÇÅ w‚ÇÇ : E ‚Üí ùïú} (hw : ‚àë i in s, w‚ÇÅ i = ‚àë i in s, w‚ÇÇ i)
    (hwp : ‚àë i in s, w‚ÇÅ i ‚Ä¢ i = ‚àë i in s, w‚ÇÇ i ‚Ä¢ i) : ‚àÄ i ‚àà s, w‚ÇÅ i = w‚ÇÇ i := by
  refine' fun i hi => sub_eq_zero.1 (hp.eq_zero_of_sum_eq_zero_subtype (w := w‚ÇÅ - w‚ÇÇ) _ _ _ hi)
  all_goals simpa [sub_mul, sub_smul, sub_eq_zero]
